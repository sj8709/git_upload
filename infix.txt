#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_STACK_SIZE 100

typedef int element;
typedef struct {
	element stack[MAX_STACK_SIZE];
	int top;
} StackType;

int test(char exp[]);
void init(StackType *s);
int is_empty(StackType *s);
int is_full(StackType *s);
void push(StackType *s, element item);
element pop(StackType *s);
element peek(StackType *s);
int prec(char op);
void infix_to_postfix(char exp[], char postfix[]);
int eval(char exp[]);

void main()
{
	char form1[MAX_STACK_SIZE], form2[MAX_STACK_SIZE];
	int calc;
	printf("1. infix 수식을 입력하시오\n");
	scanf("%s", form1);
	if (test(form1) == 1)
	{
		printf("제한된 문자 외 사용\n");
		exit(0);
	}
	else
	{
		printf("2. postfix 수식으로 표현\n");
		infix_to_postfix(form1, form2);
		printf("postfix -> ");
		printf("%s\n", form2);
		calc = eval(form2);
		printf("3. 계산 결과 : ");
		printf("%d", calc);
		printf("\n");
	}
}

int test(char exp[])
{
	int i = 0;
	int c = 0, c1 =0;
	int len = strlen(exp);
	if (len == 1) //한문자 일때
		return 1;
	if (exp[0] == '+' || exp[0] == '-' || exp[0] == '*' || exp[0] == '/' || exp[0] == '%') //첫번째에 연산자가 올때
		return 1;
	for (i = 0; i < len; i++) //괄호 채크
	{
		if (exp[i] == '(')
			c++;
		else if (exp[i] == ')')
			c1++;
		if (exp[i] == '+' || exp[i] == '-' || exp[i] == '*' || exp[i] == '/' || exp[i] == '%') // 마지막에 수식이 올때
			if (i == len-1)
				return 1;
	}
	if (c != c1)
		return 1;
	for (i = 0; i < len; i++)
	{
		if (exp[i] == '(' || exp[i] == ')' || exp[i] == '+' || exp[i] == '-' || exp[i] == '*' || exp[i] == '/' || exp[i] == '%' || ('0' <= exp[i] && exp[i] <= '9')) // 입력 가능한 숫자 및 연산자
		{
			if ('0' <= exp[i] && exp[i] <= '9') //숫자일 경우
			{
				if ('0' <= exp[i + 1] && exp[i + 1] <= '9') //다음 문자도 숫자일 경우(0-9)넘어감
					return 1;
				else  if (exp[i + 1] == '(') //다음 문자가 여는 '(' 괄호일 경우
					return 1;
			}
			else if (exp[i] == '+' || exp[i] == '-' || exp[i] == '*' || exp[i] == '/' || exp[i] == '%') // 연산자일 경우
			{
				if (exp[i + 1] == '+' || exp[i + 1] == '-' || exp[i + 1] == '*' || exp[i + 1] == '/' || exp[i + 1] == '%') // 다음 문자도 연산자일 경우 ex)++,//,+/
					return 1;
				else if (exp[i + 1] == '(') // 다음 문자가 여는 괄호일때
				{
					if (exp[i - 1] == '(') // 연산자 전 문자 또한 여는 괄호 일경우 ex (+(
						return 1;
				}
				else if (exp[i + 1] == ')') //다음 문자가 닫는 괄호일때
					return 1;
			}
			else if (exp[i] == '(') // 여는 괄호일때
			{
				if (exp[i + 1] == '-') // 여는 괄호 뒤에 바로 '-'가 오면
					return 1;
			}
		}
		else return 1;
	}
}

void init(StackType *s)
{
	s->top = -1;
}

int is_empty(StackType *s)
{
	return (s->top == -1);
}

int is_full(StackType *s)
{
	return (s->top == (MAX_STACK_SIZE - 1));
}

void push(StackType *s, element item)
{
	if (is_full(s)) {
		fprintf(stderr, "스택 포화 에러\n");
		return;
	}
	else
		s->stack[++(s->top)] = item;
}

element pop(StackType *s)
{
	if (is_empty(s)) {
		fprintf(stderr, "스택 공백 에러\n");
		exit(1);
	}
	else
		return s->stack[(s->top)--];
}

element peek(StackType *s)
{
	if (is_full(s)){
		fprintf(stderr, "스택 공백 에러\n");
		exit(1);
	}
	else
		return s->stack[s->top];
}

int prec(char op)
{
	switch (op) {
	case '(': case ')': return 0;
	case '+': case '-': return 1;
	case '*': case '/': case '%': return 2;
	}
	return -1;
}

void infix_to_postfix(char exp[], char postfix[])
{
	int i, j = 0;
	char ch, top_op;
	int len = strlen(exp);
	char stack[100], stack1[100];
	int top = 0, top1 = 0;
	StackType s;
	init(&s);
	puts("변환과정");
	puts("symbol\tstack\tpostfix");
	for (i = 0; i < len; i++)
	{
		ch = exp[i];

		putchar('\n');
		putchar(ch);
		putchar('\t');
		switch (ch)
		{
		case '+': case '-': case '*': case '/': case '%':
			while (!is_empty(&s) && (prec(ch) <= prec(peek(&s))))
			{
				*(postfix++) = pop(&s);
				stack1[top1] = stack[top - 1];
				top1++;
				top--;
				stack[top] = ' ';
			}
			stack[top] = ch;
			top++;
			push(&s, ch);
			break;

		case '(':
			stack[top] = ch;
			top++;
			push(&s, ch);
			break;

		case ')':
			top_op = pop(&s);
			stack1[top1] = stack[top - 1];
			top1++;
			top--;
			stack[top] = ' ';

			while (top_op != '(')
			{
				*(postfix++) = top_op;
				top--;
				stack[top] = ' ';
				top_op = pop(&s);
			}
			break;

		default:
			*(postfix++) = ch;
			stack1[top1] = ch;
			top1++;
		}

		for (j = 0; j < top; j++)
		{
			putchar(stack[j]);
		}
		putchar('\t');
		for (j = 0; j < top1; j++)
		{
			putchar(stack1[j]);
		}
	}

	while (!is_empty(&s))
	{
		*(postfix++) = pop(&s);
		stack1[top1] = stack[top - 1];
		putchar(stack1[top1]);
	}

	putchar('\n');
	*postfix = '\0';
}
int eval(char exp[])
{
	int op1, op2, value, i, j = 0;
	int len = strlen(exp);
	char ch;
	char cstack[100], cstack1[100];
	int top = 0, top1 = 0;
	StackType s;
	init(&s);
	puts("\n계산과정");
	puts("symbol\tcalc\tstack\n");
	for (i = 0; i<len; i++)
	{
		ch = exp[i];
		putchar(ch);
		putchar('\t');
		if (top != 0)
		{
			top--;
			cstack[top] = ' ';
			top--;
			cstack[top] = ' ';
			top--;
			cstack[top] = ' ';
		}
		if (ch != '+'&& ch != '-' && ch != '*' && ch != '/' && ch != '%')
		{
			cstack1[top1] = ch - '0';
			top1++;
			value = ch - '0';
			push(&s, value);
		}
		else
		{
			op2 = pop(&s);
			op1 = pop(&s);
			cstack[top] = cstack1[top1 - 2];
			top++;
			cstack[top] = ch;
			top++;
			cstack[top] = cstack1[top1 - 1];
			top++;
			switch (ch){
			case '+':
				top1--;
				cstack1[top1] = ' ';
				top1--;
				cstack1[top1] = ' ';
				cstack1[top1] = op1 + op2;
				top1++;
				push(&s, op1 + op2);
				break;
			case '-':
				top1--;
				cstack1[top1] = ' ';
				top1--;
				cstack1[top1] = ' ';
				cstack1[top1] = op1 - op2;
				top1++;
				push(&s, op1 - op2);
				break;
			case '*':
				top1--;
				cstack1[top1] = ' ';
				top1--;
				cstack1[top1] = ' ';
				cstack1[top1] = op1 * op2;
				top1++;
				push(&s, op1 * op2);
				break;
			case '/':
				top1--;
				cstack1[top1] = ' ';
				top1--;
				cstack1[top1] = ' ';
				cstack1[top1] = op1 / op2;
				top1++;
				push(&s, op1 / op2);
				break;
			case '%':
				top1--;
				cstack1[top1] = ' ';
				top1--;
				cstack1[top1] = ' ';
				cstack1[top1] = op1 % op2;
				top1++;
				push(&s, op1 % op2);
				break;
			}
		}
		for (j = 0; j < top; j++)
		{
			if (j % 2 == 1)
			{
				printf("%c", cstack[j]);
			}
			else
				printf("%d", cstack[j]);
		}
		putchar('\t');
		for (j = 0; j < top1; j++)
		{
			printf("%d", cstack1[j]);
		}
		putchar('\n');
	}
	return pop(&s);
}